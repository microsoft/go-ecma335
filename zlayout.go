// Copyright (c) Microsoft Corporation
// Licensed under the MIT License.

// Code generated by "genlayout"; DO NOT EDIT.

package winmd

import (
	"fmt"
	"github.com/microsoft/go-winmd/flags"
)

// Define tables struct

// Tables provides access to the tables and records stored in the #~ stream
// as defined in Â§II.24.2.6
type Tables struct {
	Assembly               Table[Assembly, *Assembly]
	AssemblyRef            Table[AssemblyRef, *AssemblyRef]
	ClassLayout            Table[ClassLayout, *ClassLayout]
	Constant               Table[Constant, *Constant]
	CustomAttribute        Table[CustomAttribute, *CustomAttribute]
	DeclSecurity           Table[DeclSecurity, *DeclSecurity]
	EventMap               Table[EventMap, *EventMap]
	Event                  Table[Event, *Event]
	ExportedType           Table[ExportedType, *ExportedType]
	Field                  Table[Field, *Field]
	FieldLayout            Table[FieldLayout, *FieldLayout]
	FieldMarshal           Table[FieldMarshal, *FieldMarshal]
	FieldRVA               Table[FieldRVA, *FieldRVA]
	File                   Table[File, *File]
	GenericParam           Table[GenericParam, *GenericParam]
	GenericParamConstraint Table[GenericParamConstraint, *GenericParamConstraint]
	ImplMap                Table[ImplMap, *ImplMap]
	InterfaceImpl          Table[InterfaceImpl, *InterfaceImpl]
	ManifestResource       Table[ManifestResource, *ManifestResource]
	MemberRef              Table[MemberRef, *MemberRef]
	MethodDef              Table[MethodDef, *MethodDef]
	MethodImpl             Table[MethodImpl, *MethodImpl]
	MethodSemantics        Table[MethodSemantics, *MethodSemantics]
	MethodSpec             Table[MethodSpec, *MethodSpec]
	Module                 Table[Module, *Module]
	ModuleRef              Table[ModuleRef, *ModuleRef]
	NestedClass            Table[NestedClass, *NestedClass]
	Param                  Table[Param, *Param]
	Property               Table[Property, *Property]
	PropertyMap            Table[PropertyMap, *PropertyMap]
	StandAloneSig          Table[StandAloneSig, *StandAloneSig]
	TypeDef                Table[TypeDef, *TypeDef]
	TypeRef                Table[TypeRef, *TypeRef]
	TypeSpec               Table[TypeSpec, *TypeSpec]
}

func newTables(data []byte, hps heaps, layout *layout) *Tables {
	var t Tables
	t.Assembly = newTable[Assembly](data, hps, layout, tableAssembly)
	t.AssemblyRef = newTable[AssemblyRef](data, hps, layout, tableAssemblyRef)
	t.ClassLayout = newTable[ClassLayout](data, hps, layout, tableClassLayout)
	t.Constant = newTable[Constant](data, hps, layout, tableConstant)
	t.CustomAttribute = newTable[CustomAttribute](data, hps, layout, tableCustomAttribute)
	t.DeclSecurity = newTable[DeclSecurity](data, hps, layout, tableDeclSecurity)
	t.EventMap = newTable[EventMap](data, hps, layout, tableEventMap)
	t.Event = newTable[Event](data, hps, layout, tableEvent)
	t.ExportedType = newTable[ExportedType](data, hps, layout, tableExportedType)
	t.Field = newTable[Field](data, hps, layout, tableField)
	t.FieldLayout = newTable[FieldLayout](data, hps, layout, tableFieldLayout)
	t.FieldMarshal = newTable[FieldMarshal](data, hps, layout, tableFieldMarshal)
	t.FieldRVA = newTable[FieldRVA](data, hps, layout, tableFieldRVA)
	t.File = newTable[File](data, hps, layout, tableFile)
	t.GenericParam = newTable[GenericParam](data, hps, layout, tableGenericParam)
	t.GenericParamConstraint = newTable[GenericParamConstraint](data, hps, layout, tableGenericParamConstraint)
	t.ImplMap = newTable[ImplMap](data, hps, layout, tableImplMap)
	t.InterfaceImpl = newTable[InterfaceImpl](data, hps, layout, tableInterfaceImpl)
	t.ManifestResource = newTable[ManifestResource](data, hps, layout, tableManifestResource)
	t.MemberRef = newTable[MemberRef](data, hps, layout, tableMemberRef)
	t.MethodDef = newTable[MethodDef](data, hps, layout, tableMethodDef)
	t.MethodImpl = newTable[MethodImpl](data, hps, layout, tableMethodImpl)
	t.MethodSemantics = newTable[MethodSemantics](data, hps, layout, tableMethodSemantics)
	t.MethodSpec = newTable[MethodSpec](data, hps, layout, tableMethodSpec)
	t.Module = newTable[Module](data, hps, layout, tableModule)
	t.ModuleRef = newTable[ModuleRef](data, hps, layout, tableModuleRef)
	t.NestedClass = newTable[NestedClass](data, hps, layout, tableNestedClass)
	t.Param = newTable[Param](data, hps, layout, tableParam)
	t.Property = newTable[Property](data, hps, layout, tableProperty)
	t.PropertyMap = newTable[PropertyMap](data, hps, layout, tablePropertyMap)
	t.StandAloneSig = newTable[StandAloneSig](data, hps, layout, tableStandAloneSig)
	t.TypeDef = newTable[TypeDef](data, hps, layout, tableTypeDef)
	t.TypeRef = newTable[TypeRef](data, hps, layout, tableTypeRef)
	t.TypeSpec = newTable[TypeSpec](data, hps, layout, tableTypeSpec)
	return &t
}

// Define table enum

type table uint8

const (
	tableModule                 table = 0
	tableTypeRef                table = 1
	tableTypeDef                table = 2
	tableField                  table = 4
	tableMethodDef              table = 6
	tableParam                  table = 8
	tableInterfaceImpl          table = 9
	tableMemberRef              table = 10
	tableConstant               table = 11
	tableCustomAttribute        table = 12
	tableFieldMarshal           table = 13
	tableDeclSecurity           table = 14
	tableClassLayout            table = 15
	tableFieldLayout            table = 16
	tableStandAloneSig          table = 17
	tableEventMap               table = 18
	tableEvent                  table = 20
	tablePropertyMap            table = 21
	tableProperty               table = 23
	tableMethodSemantics        table = 24
	tableMethodImpl             table = 25
	tableModuleRef              table = 26
	tableTypeSpec               table = 27
	tableImplMap                table = 28
	tableFieldRVA               table = 29
	tableAssembly               table = 32
	tableAssemblyProcessor      table = 33
	tableAssemblyOS             table = 34
	tableAssemblyRef            table = 35
	tableAssemblyRefProcessor   table = 36
	tableAssemblyRefOS          table = 37
	tableFile                   table = 38
	tableExportedType           table = 39
	tableManifestResource       table = 40
	tableNestedClass            table = 41
	tableGenericParam           table = 42
	tableMethodSpec             table = 43
	tableGenericParamConstraint table = 44

	tableMax  = tableGenericParamConstraint + 1
	tableNone = tableMax
)

// Define table width

func (t table) width(la *layout) uint8 {
	switch t {
	case tableAssembly:
		return 4 + 2 + 2 + 2 + 2 + 4 + la.blobSize + la.stringSize + la.stringSize
	case tableAssemblyOS:
		return 4 + 4 + 4
	case tableAssemblyProcessor:
		return 4
	case tableAssemblyRef:
		return 2 + 2 + 2 + 2 + 4 + la.blobSize + la.stringSize + la.stringSize + la.blobSize
	case tableAssemblyRefOS:
		return 4 + 4 + 4 + la.simpleSizes[tableAssemblyRef]
	case tableAssemblyRefProcessor:
		return 4 + la.simpleSizes[tableAssemblyRef]
	case tableClassLayout:
		return 2 + 4 + la.simpleSizes[tableTypeDef]
	case tableConstant:
		return 1 + 1 + la.codedSizes[codedHasConstant] + la.blobSize
	case tableCustomAttribute:
		return la.codedSizes[codedHasCustomAttribute] + la.codedSizes[codedCustomAttributeType] + la.blobSize
	case tableDeclSecurity:
		return 2 + la.codedSizes[codedHasDeclSecurity] + la.blobSize
	case tableEventMap:
		return la.simpleSizes[tableTypeDef] + la.simpleSizes[tableEvent]
	case tableEvent:
		return 2 + la.stringSize + la.codedSizes[codedTypeDefOrRef]
	case tableExportedType:
		return 4 + 4 + la.stringSize + la.stringSize + la.codedSizes[codedImplementation]
	case tableField:
		return 2 + la.stringSize + la.blobSize
	case tableFieldLayout:
		return 4 + la.simpleSizes[tableField]
	case tableFieldMarshal:
		return la.codedSizes[codedHasFieldMarshal] + la.blobSize
	case tableFieldRVA:
		return 4 + la.simpleSizes[tableField]
	case tableFile:
		return 2 + la.stringSize + la.blobSize
	case tableGenericParam:
		return 2 + 2 + la.codedSizes[codedTypeOrMethodDef] + la.stringSize
	case tableGenericParamConstraint:
		return la.simpleSizes[tableGenericParam] + la.codedSizes[codedTypeDefOrRef]
	case tableImplMap:
		return 2 + la.codedSizes[codedMemberForwarded] + la.stringSize + la.simpleSizes[tableModuleRef]
	case tableInterfaceImpl:
		return la.simpleSizes[tableTypeDef] + la.codedSizes[codedTypeDefOrRef]
	case tableManifestResource:
		return 4 + 4 + la.stringSize + la.codedSizes[codedImplementation]
	case tableMemberRef:
		return la.codedSizes[codedMemberRefParent] + la.stringSize + la.blobSize
	case tableMethodDef:
		return 4 + 2 + 2 + la.stringSize + la.blobSize + la.simpleSizes[tableParam]
	case tableMethodImpl:
		return la.simpleSizes[tableTypeDef] + la.codedSizes[codedMethodDefOrRef] + la.codedSizes[codedMethodDefOrRef]
	case tableMethodSemantics:
		return 2 + la.simpleSizes[tableMethodDef] + la.codedSizes[codedHasSemantics]
	case tableMethodSpec:
		return la.codedSizes[codedMethodDefOrRef] + la.blobSize
	case tableModule:
		return 2 + la.stringSize + la.guidSize + la.guidSize + la.guidSize
	case tableModuleRef:
		return la.stringSize
	case tableNestedClass:
		return la.simpleSizes[tableTypeDef] + la.simpleSizes[tableTypeDef]
	case tableParam:
		return 2 + 2 + la.stringSize
	case tableProperty:
		return 2 + la.stringSize + la.blobSize
	case tablePropertyMap:
		return la.simpleSizes[tableTypeDef] + la.simpleSizes[tableProperty]
	case tableStandAloneSig:
		return la.blobSize
	case tableTypeDef:
		return 4 + la.stringSize + la.stringSize + la.codedSizes[codedTypeDefOrRef] + la.simpleSizes[tableField] + la.simpleSizes[tableMethodDef]
	case tableTypeRef:
		return la.codedSizes[codedResolutionScope] + la.stringSize + la.stringSize
	case tableTypeSpec:
		return la.blobSize
	default:
		panic(fmt.Sprintf("table %v not supported", t))
	}
}

// Define table decoding functions

func (rec *Assembly) decode(r recordReader) error {
	rec.HashAlgID = flags.AssemblyHashAlgorithm(r.uint32())
	rec.MajorVersion = r.uint16()
	rec.MinorVersion = r.uint16()
	rec.BuildNumber = r.uint16()
	rec.RevisionNumber = r.uint16()
	rec.Flags = flags.AssemblyFlags(r.uint32())
	rec.PublicKey = r.blob()
	rec.Name = r.string()
	rec.Culture = r.string()
	return r.err
}

func (rec *assemblyOS) decode(r recordReader) error {
	rec.OSPlatformID = r.uint32()
	rec.OSMajorVersion = r.uint32()
	rec.OSMinorVersion = r.uint32()
	return r.err
}

func (rec *assemblyProcessor) decode(r recordReader) error {
	rec.Processor = r.uint32()
	return r.err
}

func (rec *AssemblyRef) decode(r recordReader) error {
	rec.MajorVersion = r.uint16()
	rec.MinorVersion = r.uint16()
	rec.BuildNumber = r.uint16()
	rec.RevisionNumber = r.uint16()
	rec.Flags = flags.AssemblyFlags(r.uint32())
	rec.PublicKeyOrToken = r.blob()
	rec.Name = r.string()
	rec.Culture = r.string()
	rec.HashValue = r.blob()
	return r.err
}

func (rec *assemblyRefOS) decode(r recordReader) error {
	rec.OSPlatformID = r.uint32()
	rec.OSMajorVersion = r.uint32()
	rec.OSMinorVersion = r.uint32()
	rec.AssemblyRef = r.index(tableAssemblyRef)
	return r.err
}

func (rec *assemblyRefProcessor) decode(r recordReader) error {
	rec.Processor = r.uint32()
	rec.AssemblyRef = r.index(tableAssemblyRef)
	return r.err
}

func (rec *ClassLayout) decode(r recordReader) error {
	rec.PackingSize = r.uint16()
	rec.ClassSize = r.uint32()
	rec.Parent = r.index(tableTypeDef)
	return r.err
}

func (rec *Constant) decode(r recordReader) error {
	rec.Type = flags.ElementType(r.uint8())
	rec.Padding = r.uint8()
	rec.Parent = r.coded(codedHasConstant)
	rec.Value = r.blob()
	return r.err
}

func (rec *CustomAttribute) decode(r recordReader) error {
	rec.Parent = r.coded(codedHasCustomAttribute)
	rec.Type = r.coded(codedCustomAttributeType)
	rec.Value = r.blob()
	return r.err
}

func (rec *DeclSecurity) decode(r recordReader) error {
	rec.Action = r.uint16()
	rec.Parent = r.coded(codedHasDeclSecurity)
	rec.PermissionSet = r.blob()
	return r.err
}

func (rec *EventMap) decode(r recordReader) error {
	rec.Parent = r.index(tableTypeDef)
	rec.EventList = r.slice(tableEventMap, tableEvent)
	return r.err
}

func (rec *Event) decode(r recordReader) error {
	rec.EventFlags = flags.EventAttributes(r.uint16())
	rec.Name = r.string()
	rec.EventType = r.coded(codedTypeDefOrRef)
	return r.err
}

func (rec *ExportedType) decode(r recordReader) error {
	rec.Flags = flags.TypeAttributes(r.uint32())
	rec.TypeDefID = r.uint32()
	rec.Name = r.string()
	rec.Namespace = r.string()
	rec.Implementation = r.coded(codedImplementation)
	return r.err
}

func (rec *Field) decode(r recordReader) error {
	rec.Flags = flags.FieldAttributes(r.uint16())
	rec.Name = r.string()
	rec.Signature = r.blob()
	return r.err
}

func (rec *FieldLayout) decode(r recordReader) error {
	rec.Offset = r.uint32()
	rec.Field = r.index(tableField)
	return r.err
}

func (rec *FieldMarshal) decode(r recordReader) error {
	rec.Parent = r.coded(codedHasFieldMarshal)
	rec.NativeType = r.blob()
	return r.err
}

func (rec *FieldRVA) decode(r recordReader) error {
	rec.RVA = r.uint32()
	rec.Field = r.index(tableField)
	return r.err
}

func (rec *File) decode(r recordReader) error {
	rec.Flags = flags.FileAttributes(r.uint16())
	rec.Name = r.string()
	rec.HashValue = r.blob()
	return r.err
}

func (rec *GenericParam) decode(r recordReader) error {
	rec.Number = r.uint16()
	rec.Flags = flags.GenericParamAttributes(r.uint16())
	rec.Owner = r.coded(codedTypeOrMethodDef)
	rec.Name = r.string()
	return r.err
}

func (rec *GenericParamConstraint) decode(r recordReader) error {
	rec.Owner = r.index(tableGenericParam)
	rec.Constraint = r.coded(codedTypeDefOrRef)
	return r.err
}

func (rec *ImplMap) decode(r recordReader) error {
	rec.MappingFlags = flags.PInvokeAttributes(r.uint16())
	rec.MemberForwarded = r.coded(codedMemberForwarded)
	rec.ImportName = r.string()
	rec.ImportScope = r.index(tableModuleRef)
	return r.err
}

func (rec *InterfaceImpl) decode(r recordReader) error {
	rec.Class = r.index(tableTypeDef)
	rec.Interface = r.coded(codedTypeDefOrRef)
	return r.err
}

func (rec *ManifestResource) decode(r recordReader) error {
	rec.Offset = r.uint32()
	rec.Flags = flags.ManifestResourceAttributes(r.uint32())
	rec.Name = r.string()
	rec.Implementation = r.coded(codedImplementation)
	return r.err
}

func (rec *MemberRef) decode(r recordReader) error {
	rec.Class = r.coded(codedMemberRefParent)
	rec.Name = r.string()
	rec.Signature = r.blob()
	return r.err
}

func (rec *MethodDef) decode(r recordReader) error {
	rec.RVA = r.uint32()
	rec.ImplFlags = flags.MethodImplAttributes(r.uint16())
	rec.Flags = flags.MethodAttributes(r.uint16())
	rec.Name = r.string()
	rec.Signature = r.blob()
	rec.ParamList = r.slice(tableMethodDef, tableParam)
	return r.err
}

func (rec *MethodImpl) decode(r recordReader) error {
	rec.Class = r.index(tableTypeDef)
	rec.MethodBody = r.coded(codedMethodDefOrRef)
	rec.MethodDeclaration = r.coded(codedMethodDefOrRef)
	return r.err
}

func (rec *MethodSemantics) decode(r recordReader) error {
	rec.Semantics = flags.MethodSemanticsAttributes(r.uint16())
	rec.Method = r.index(tableMethodDef)
	rec.Association = r.coded(codedHasSemantics)
	return r.err
}

func (rec *MethodSpec) decode(r recordReader) error {
	rec.Method = r.coded(codedMethodDefOrRef)
	rec.Instantiation = r.blob()
	return r.err
}

func (rec *Module) decode(r recordReader) error {
	rec.Generation = r.uint16()
	rec.Name = r.string()
	rec.Mvid = r.guid()
	rec.EncID = r.guid()
	rec.EncBaseID = r.guid()
	return r.err
}

func (rec *ModuleRef) decode(r recordReader) error {
	rec.Name = r.string()
	return r.err
}

func (rec *NestedClass) decode(r recordReader) error {
	rec.NestedClass = r.index(tableTypeDef)
	rec.EnclosingClass = r.index(tableTypeDef)
	return r.err
}

func (rec *Param) decode(r recordReader) error {
	rec.Flags = flags.ParamAttributes(r.uint16())
	rec.Sequence = r.uint16()
	rec.Name = r.string()
	return r.err
}

func (rec *Property) decode(r recordReader) error {
	rec.Flags = flags.PropertyAttributes(r.uint16())
	rec.Name = r.string()
	rec.Type = r.blob()
	return r.err
}

func (rec *PropertyMap) decode(r recordReader) error {
	rec.Parent = r.index(tableTypeDef)
	rec.PropertyList = r.slice(tablePropertyMap, tableProperty)
	return r.err
}

func (rec *StandAloneSig) decode(r recordReader) error {
	rec.Signature = r.blob()
	return r.err
}

func (rec *TypeDef) decode(r recordReader) error {
	rec.Flags = flags.TypeAttributes(r.uint32())
	rec.Name = r.string()
	rec.Namespace = r.string()
	rec.Extends = r.coded(codedTypeDefOrRef)
	rec.FieldList = r.slice(tableTypeDef, tableField)
	rec.MethodList = r.slice(tableTypeDef, tableMethodDef)
	return r.err
}

func (rec *TypeRef) decode(r recordReader) error {
	rec.ResolutionScope = r.coded(codedResolutionScope)
	rec.Name = r.string()
	rec.Namespace = r.string()
	return r.err
}

func (rec *TypeSpec) decode(r recordReader) error {
	rec.Signature = r.blob()
	return r.err
}
